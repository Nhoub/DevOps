name: Bunnyshell - Deploy Preview Environment
on:
  workflow_run:
    workflows:
      - "Bunnyshell - Prepare Preview Environment Configuration"
    types:
      - completed
permissions:
  pull-requests: write
jobs:
  load-artifact-from-reusable:
    name: Load artifact values
    uses: bunnyshell/workflows/.github/workflows/load-artifact.yaml@v2
    with:
      workflow_run_id: ${{ github.event.workflow_run.id }}

  deploy:
    name: Deploy Environment
    needs: load-artifact-from-reusable
    uses: bunnyshell/workflows/.github/workflows/deploy-env.yaml@v2
    concurrency: bns-deploy-${{ needs.load-artifact-from-reusable.outputs.pr-number }}
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.load-artifact-from-reusable.outputs.skip-deployment == 'false' }}
    with:
      pr-number: ${{ needs.load-artifact-from-reusable.outputs.pr-number }}
      project-id: ${{ vars.BUNNYSHELL_PROJECT_ID }}
      cluster-id: ${{ vars.BUNNYSHELL_CLUSTER_ID }}
      env-name: "Demo PR #${{ needs.load-artifact-from-reusable.outputs.pr-number }}"
      bunnyshell-yaml-contents: "kind: Environment\nname: preview\ntype: primary\nurlHandle: x2ems5\ncomponents:\n    -\n        kind: Application\n        name: grafana\n      gitRepo: 'https://github.com/Nhoub/DevOps.git'\n        gitBranch: main\n        gitApplicationPath: grafana\n        dockerCompose:\n            build:\n                context: ./grafana\n                dockerfile: Dockerfile\n            ports:\n                - '3000:3000'\n        hosts:\n            -\n                hostname: 'grafana-{{ env.base_domain }}'\n                path: /\n                servicePort: 3000\n    -\n        kind: Database\n        name: mongo-service\n        dockerCompose:\n            image: mongo\n            ports:\n                - '27017:27017'\n    -\n        kind: Database\n        name: mongodb-exporter\n        dockerCompose:\n            environment:\n                MONGODB_URI: 'mongodb://mongo-database:27017'\n            image: 'bitnami/mongodb-exporter:latest'\n   ports:\n                - '9216:9216'\n    -\n        kind: Service\n        name: prometheus\n        dockerCompose:\n            image: prom/prometheus\n            ports:\n                - '9090:9090'\n        hosts:\n            -\n                hostname: 'prometheus-{{ env.base_domain }}'\n                path: /\n                servicePort: 9090\n    -\n        kind: Service\n        name: rabbitmq\n    dockerCompose:\n            environment:\n                RABBITMQ_DEFAULT_PASS: password\n                RABBITMQ_DEFAULT_USER: user\n            image: 'rabbitmq:3-management'\n            ports:\n                - '5672:5672'\n                - '15672:15672'\n        hosts:\n            -\n                hostname: 'rabbitmq-{{ env.base_domain }}'\n                path: /\n                servicePort: 5672\n   -\n        kind: Application\n        name: service1\n        gitRepo: 'https://github.com/Nhoub/DevOps.git'\n        gitBranch: main\n      gitApplicationPath: service1\n        dockerCompose:\n            build:\n                context: ./service1\n                dockerfile: Dockerfile\n            environment:\n                MONGODB_HOST: 'mongodb://mongo-service:27017'\n                PORT: '3005'\n           RABBITMQ_HOST: 'amqp://user:password@rabbitmq'\n                RABBITMQ_SEND: channel1\n            ports:\n                - '3005:3005'\n        hosts:\n            -\n                hostname: 'service1-{{ env.base_domain }}'\n                path: /\n   servicePort: 3005\n    -\n        kind: Application\n        name: service2\n        gitRepo: 'https://github.com/Nhoub/DevOps.git'\n    gitBranch: main\n        gitApplicationPath: service2\n        dockerCompose:\n            build:\n                context: ./service2\n                dockerfile: Dockerfile\n            environment:\n                MONGODB_HOST: 'mongodb://mongo-service:27017'\n     RABBITMQ_HOST: 'amqp://user:password@rabbitmq'\n                RABBITMQ_RECEIVE: channel1\n"
      comment-on-pr: true
    secrets:
      bunnyshell-access-token: ${{ secrets.BUNNYSHELL_ACCESS_TOKEN }}
